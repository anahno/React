# آموزش ری‌اکت - جلسه ۴

## مقدمه
سلام به همه! خوش آمدید به جلسه چهارم آموزش ری‌اکت با من، بهزاد فرهادی!  
تا اینجای کار، با راه‌اندازی پروژه، ساختار اولیه و ساخت یک کامپوننت ساده آشنا شده‌ایم. در این جلسه، می‌خواهیم عمیق‌تر به موضوع کامپوننت‌ها بپردازیم. یاد می‌گیریم که چگونه کامپوننت‌ها را با اطلاعات پویا بسازیم، از `props` استفاده کنیم، آن‌ها را صادر و وارد کنیم و همچنین با ابزارهای توسعه‌دهندگان ری‌اکت کار کنیم. بیایید قدم به قدم پیش برویم!

## آنچه در این جلسه خواهید آموخت
- تعریف یک کامپوننت با استفاده از توابع
- ارسال و استفاده از `props` برای انتقال داده‌ها
- ساخت کامپوننت با اطلاعات ثابت
- صادر کردن و وارد کردن کامپوننت‌ها با `export default` و `import`
- استفاده از ابزارهای توسعه‌دهندگان ری‌اکت

## پیش‌نیازها
- یک پروژه ری‌اکت که با `create-react-app` راه‌اندازی شده باشد
- دانش اولیه از جلسات قبلی (راه‌اندازی پروژه و ساخت کامپوننت ساده)

## مراحل آموزشی

### ۱. تعریف یک کامپوننت در ری‌اکت
کامپوننت‌ها در ری‌اکت بلوک‌های سازنده رابط کاربری هستند. می‌توانیم آن‌ها را با استفاده از توابع یا کلاس‌ها بسازیم. در این آموزش، از توابع استفاده می‌کنیم که ساده‌تر هستند.

#### قدم اول: ایجاد فایل کامپوننت
1. داخل پوشه `src` یک پوشه جدید به نام `components` بسازید (اگر قبلاً درست نکرده‌اید).
2. داخل پوشه `components` یک فایل جدید با نام `Person.jsx` ایجاد کنید.

#### قدم دوم: نوشتن کد کامپوننت
کامپوننت را به صورت زیر تعریف کنید:

```jsx
function Person(props) {
  return (
    <div>
      <h2>نام: {props.name}</h2>
      <p>فامیل: {props.family}</p>
      <p>سن: {props.age} سال</p>
    </div>
  );
}
```

- `function Person(props)`: یک تابع که به عنوان کامپوننت تعریف شده است.
- `props`: داده‌هایی که از کامپوننت والد دریافت می‌شود.
- `{props.name}`: استفاده از `props` برای نمایش داده‌ها در قالب `JSX`.

#### توضیحات
- کامپوننت `Person` یک تابع است که یک شیء `props` دریافت می‌کند.
- `return` شامل کدی است که در رابط کاربری نمایش داده می‌شود (با استفاده از `JSX`).

### ۲. ارسال `props` به کامپوننت
برای استفاده از کامپوننت، باید داده‌ها را از طریق `props` به آن ارسال کنیم.

#### قدم اول: ویرایش فایل `App.jsx`
1. فایل `App.jsx` را باز کنید.
2. کامپوننت `Person` را وارد کنید و از آن استفاده کنید:

```jsx
import Person from './components/Person';

function App() {
  return (
    <div>
      <Person name="بهزاد" family="فرهادی" age="35" />
    </div>
  );
}

export default App;
```

- `import Person from './components/Person';`: وارد کردن کامپوننت از مسیر مشخص.
- `<Person name="بهزاد" ... />`: ارسال داده‌ها به عنوان `props` با استفاده از ویژگی‌ها.

#### نتیجه
وقتی پروژه را اجرا کنید (با دستور `npm start`)، باید اطلاعاتی مثل "نام: بهزاد"، "فامیل: فرهادی" و "سن: ۳۵ سال" در صفحه نمایش داده شود.

### ۳. ساخت کامپوننت با اطلاعات ثابت
اگر بخواهیم اطلاعات ثابت در کامپوننت داشته باشیم، می‌توانیم آن‌ها را داخل کامپوننت تعریف کنیم.

#### قدم اول: به‌روزرسانی `Person.jsx`
فایل `Person.jsx` را به این صورت تغییر دهید:

```jsx
function Person() {
  const name = "بهزاد";
  const family = "فرهادی";
  const age = 35;

  return (
    <div>
      <h2>نام: {name}</h2>
      <p>فامیل: {family}</p>
      <p>سن: {age} سال</p>
    </div>
  );
}

export default Person;
```

- `const name = "بهزاد";`: تعریف متغیرهای ثابت داخل کامپوننت.
- `export default Person`: صادر کردن کامپوننت برای استفاده در جای دیگر.

#### قدم دوم: به‌روزرسانی `App.jsx`
فایل `App.jsx` را به این صورت ویرایش کنید:

```jsx
import Person from './components/Person';

function App() {
  return (
    <div>
      <Person />
    </div>
  );
}

export default App;
```

- دیگر نیازی به ارسال `props` نیست، چون داده‌ها داخل کامپوننت تعریف شده‌اند.

### ۴. صادر کردن و وارد کردن کامپوننت
برای استفاده مجدد از کامپوننت در پروژه، باید آن را صادر کنیم.

#### توضیحات
- `export default`: به ما اجازه می‌دهد فقط یک کامپوننت را به صورت پیش‌فرض از فایل صادر کنیم.
- `import`: برای استفاده از کامپوننت در فایل‌های دیگر.

#### قدم عملی
- فایل `Person.jsx` قبلاً با `export default Person` صادر شده است.
- در `App.jsx` با `import Person from './components/Person';` آن را وارد کرده‌ایم.

### ۵. استفاده از ابزارهای توسعه‌دهندگان ری‌اکت
ابزارهای توسعه‌دهندگان به ما کمک می‌کنند تا کامپوننت‌ها را بررسی و دیباگ کنیم.

#### قدم اول: نصب React Developer Tools
1. افزونه `React Developer Tools` را از مرورگر کروم یا فایرفاکس نصب کنید.
2. پروژه را با `npm start` اجرا کنید و به آدرس `localhost:3000` بروید.

#### قدم دوم: بررسی کامپوننت‌ها
- تب جدیدی به نام `React` در ابزارهای توسعه‌دهندگان مرورگر ظاهر می‌شود.
- ساختار کامپوننت‌ها (مثل `App` و `Person`) را می‌توانید ببینید و وضعیت `props` را بررسی کنید.

## نکات تکمیلی
- همیشه نام کامپوننت‌ها را با حروف بزرگ شروع کنید (مثل `Person`).
- از `props` برای انتقال داده‌های پویا استفاده کنید.
- پوشه‌ها و فایل‌ها را منظم نگه دارید (مثلاً `components` برای کامپوننت‌ها).
- کامنت‌گذاری در کد به شما کمک می‌کند در پروژه‌های بزرگ‌تر راحت‌تر کار کنید.

## خلاصه جلسه
در این جلسه، یاد گرفتیم که چگونه یک کامپوننت را با استفاده از توابع تعریف کنیم، داده‌ها را با `props` ارسال کنیم و یک کامپوننت با اطلاعات ثابت بسازیم. همچنین، روش صادر کردن و وارد کردن کامپوننت‌ها را با `export default` و `import` آموختیم. در نهایت، با ابزارهای توسعه‌دهندگان ری‌اکت آشنا شدیم و پروژه را در `localhost:3000` اجرا کردیم. در جلسه بعدی، به سراغ مفاهیم پیشرفته‌تر مثل `state` و مدیریت رویدادها می‌رویم!

## تاریخ
این آموزش در تاریخ ۱۹ مه ۲۰۲۵ (۳:۰۹ صبح به وقت مرکزی آمریکا) تهیه شده است.