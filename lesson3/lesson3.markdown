# آموزش React - جلسه سوم

## مقدمه
سلام به همه! خوش اومدید به جلسه سوم آموزش React با من، بهزاد!  
در جلسه قبل یاد گرفتیم که چطور یک پروژه React راه‌اندازی کنیم، ساختار پروژه رو بررسی کردیم و یه کامپوننت ساده ساختیم. امروز می‌خوایم یه قدم جلوتر بریم و با مفاهیم اولیه ساخت و استفاده از کامپوننت‌ها در React آشنا بشیم. همچنین یاد می‌گیرید که چطور پروژه رو بهینه‌تر کنیم و یه محیط توسعه بهتر داشته باشیم.

## آنچه در این جلسه خواهید آموخت:
1. **بهینه‌سازی ساختار پروژه**
   - حذف فایل‌های غیرضروری
   - مرتب‌سازی پوشه `src`

2. **ساخت اولین کامپوننت در React**
   - نوشتن یک کامپوننت ساده
   - export و import کردن کامپوننت‌ها

3. **اتصال React به صفحه HTML**
   - بررسی فایل `index.js`
   - استفاده از `ReactDOM` برای رندر کردن کامپوننت‌ها

4. **نکات تکمیلی برای توسعه بهتر**
   - مدیریت بهتر ساختار پروژه
   - نکات اولیه برای کدنویسی تمیز

## ۱. بهینه‌سازی ساختار پروژه
اولین کاری که می‌خوایم انجام بدیم، اینه که پروژه‌مون رو تمیز کنیم. وقتی با `create-react-app` یه پروژه می‌سازید، یه سری فایل و پوشه پیش‌فرض داره که ممکنه به همه‌شون نیاز نداشته باشیم.

- **حذف فایل‌های غیرضروری:**  
  داخل پوشه `src` فایل‌هایی مثل `App.css`، `logo.svg` و `App.test.js` رو می‌تونید فعلاً حذف کنید. ما تو این مرحله نیازی به این‌ها نداریم. فقط `App.jsx` و `index.js` رو نگه دارید.

- **مرتب‌سازی پوشه `src`:**  
  یه پوشه جدید به اسم `components` داخل `src` بسازید. قراره از این به بعد کامپوننت‌هامون رو اینجا نگه داریم تا پروژه‌مون منظم‌تر بشه.

## ۲. ساخت اولین کامپوننت در React
حالا می‌ریم سراغ ساخت یه کامپوننت ساده. تو React، کامپوننت‌ها مثل بلوک‌های سازنده هستن که می‌تونیم باهاشون رابط کاربری (UI) بسازیم.

- **ایجاد فایل کامپوننت:**  
  داخل پوشه `components` یه فایل جدید به اسم `FirstComponent.jsx` بسازید. حالا کد زیر رو داخلش بنویسید:

  ```jsx
  function FirstComponent() {
    return (
      <div>
        <h1>My First Component</h1>
        <p>خوش اومدید به آموزش React!</p>
      </div>
    );
  }

  export default FirstComponent;
  ```

  - `function FirstComponent()`: این یه کامپوننت ساده است که یه تابع جاوااسکریپته.
  - `return`: اینجا مشخص می‌کنیم که این کامپوننت قراره چی نمایش بده. ما یه `div` داریم که شامل یه تیتر و یه پاراگراف میشه.
  - `export default`: این خط باعث میشه بتونیم این کامپوننت رو تو فایل‌های دیگه استفاده کنیم.

- **نکته مهم:**  
  اسم کامپوننت‌ها تو React باید با حرف بزرگ شروع بشه (مثلاً `FirstComponent`). این یه قانون تو Reactه که کمک می‌کنه React بفهمه این یه کامپوننت سفارشیه نه یه تگ HTML معمولی.

## ۳. اتصال کامپوننت به پروژه
حالا که کامپوننت‌مون رو ساختیم، باید ازش تو پروژه استفاده کنیم. برای این کار می‌ریم به فایل `App.jsx`.

- **وارد کردن (Import) کامپوننت:**  
  فایل `App.jsx` رو باز کنید و کد زیر رو بنویسید:

  ```jsx
  import FirstComponent from './components/FirstComponent';

  function App() {
    return (
      <div>
        <FirstComponent />
      </div>
    );
  }

  export default App;
  ```

  - `import FirstComponent from './components/FirstComponent'`: اینجا کامپوننت‌مون رو از مسیر درست وارد می‌کنیم.
  - `<FirstComponent />`: تو بخش `return` ازش استفاده می‌کنیم تا تو صفحه نمایش داده بشه.

- **اتصال به صفحه HTML با `index.js`:**  
  حالا یه نگاه به فایل `index.js` بندازیم. این فایل مسئول اینه که کد React ما رو به صفحه HTML متصل کنه:

  ```jsx
  import React from 'react';
  import ReactDOM from 'react-dom/client';
  import App from './App';

  const root = ReactDOM.createRoot(document.getElementById('root'));
  root.render(<App />);
  ```

  - `import React from 'react'`: برای استفاده از قابلیت‌های React.
  - `import ReactDOM from 'react-dom/client'`: برای رندر کردن React تو صفحه HTML.
  - `document.getElementById('root')`: اینجا به یه تگ HTML تو فایل `index.html` اشاره می‌کنه که قراره محتوای React ما توش رندر بشه.
  - `root.render(<App />)`: این خط میگه که کامپوننت `App` (و در نتیجه `FirstComponent` که توش استفاده شده) تو صفحه نمایش داده بشه.

- **اجرا و تست:**  
  تو ترمینال، دستور `npm start` رو اجرا کنید. مرورگر باز میشه و باید خروجی کامپوننت‌مون رو ببینید: یه تیتر که میگه "My First Component" و یه پاراگراف که میگه "خوش اومدید به آموزش React!".

## ۴. نکات تکمیلی برای توسعه بهتر
برای اینکه یه توسعه‌دهنده بهتر بشید، یه سری کار می‌تونید انجام بدید:

- **مدیریت ساختار پروژه:**  
  همیشه سعی کنید فایل‌هاتون رو منظم نگه دارید. مثلاً:
  - یه پوشه `components` برای کامپوننت‌ها.
  - یه پوشه `assets` برای فایل‌هایی مثل عکس‌ها.
  - یه پوشه `styles` برای فایل‌های CSS (که بعداً باهاش کار می‌کنیم).

- **کدنویسی تمیز:**  
  - از اسم‌های معنی‌دار برای کامپوننت‌ها استفاده کنید.
  - کامپوننت‌ها رو کوچک و متمرکز نگه دارید (هر کامپوننت یه کار خاص انجام بده).
  - از کامنت‌گذاری تو کد غافل نشید، مخصوصاً اگه پروژه‌تون بزرگ‌تر بشه.

- **پیشنهاد حرفه‌ای:**  
  اگه با `create-react-app` کار می‌کنید و حس می‌کنید پروژه‌تون کند شده، می‌تونید از ابزارهای دیگه مثل **Vite** برای ساخت پروژه React استفاده کنید. Vite خیلی سریع‌تره و تنظیمات ساده‌تری داره. تو جلسات بعدی بیشتر در موردش صحبت می‌کنیم.

## جمع‌بندی
خب، تو این جلسه یاد گرفتیم که چطور پروژه‌مون رو بهینه کنیم، یه کامپوننت ساده بسازیم و اون رو تو پروژه‌مون استفاده کنیم. همچنین دیدیم که React چطور با HTML ارتباط برقرار می‌کنه و یه سری نکته برای توسعه بهتر یاد گرفتیم. تو جلسه بعدی قراره بریم سراغ مفاهیم پیشرفته‌تر مثل props و state، پس حتماً تمرین‌هاتون رو انجام بدید و با ساختار پروژه بیشتر آشنا بشید.