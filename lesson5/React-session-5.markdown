# آموزش React - جلسه ۵: ساخت لیست کتاب‌ها با کامپوننت‌ها

**تاریخ و زمان:** دوشنبه، ۱۹ می ۲۰۲۵، ساعت ۱۲:۴۲ بعدازظهر به وقت BST

---

سلام به همه! بهزاد فرهادی هستم و امروز می‌خواهیم یک پروژه جذاب بسازیم: یک لیست کتاب که هر کتاب شامل تصویر جلد، عنوان و نویسنده باشد. این پروژه را با الهام از سایت bazarketab.ir طراحی می‌کنیم. تا پایان این جلسه، ساختار اولیه را با React می‌سازیم و برای استایل‌دهی در جلسات بعدی آماده می‌شویم. آماده‌اید؟ بریم سراغ کار!

## گام ۱: آماده‌سازی پروژه

اولین قدم این است که مطمئن شویم یک پروژه React داریم. اگر هنوز پروژه‌ای نساختید، با دستور زیر یک پروژه جدید بسازید:

```bash
npx create-react-app book-list-project
cd book-list-project
```

حالا داخل پوشه `src`، یک پوشه به نام `Components` بسازید. قرار است تمام کامپوننت‌هایمان را اینجا نگه داریم.

## گام ۲: ساخت کامپوننت‌های اولیه

هر بخش از کارت کتاب را به‌صورت یک کامپوننت جداگانه می‌سازیم. این کار باعث می‌شود کدمان مرتب و قابل استفاده مجدد باشد.

### ۲.۱: کامپوننت Image.js

بیایید با نمایش تصویر جلد کتاب شروع کنیم. فایل `Image.js` را در پوشه `src/Components` بسازید و این کد را بنویسید:

```jsx
import React from "react";

function Image() {
  return (
    <img
      src="https://pic.ketab.ir/DataBase/BookImages/00/1400b12629.jpg"
      alt="سو و شوون"
    />
  );
}

export default Image;
```

**توضیح:** اینجا یک تگ `<img>` تعریف کردیم که تصویر یک کتاب را نمایش می‌دهد. ویژگی `alt` برای دسترسی‌پذیری و سئو مهم است.

### ۲.۲: کامپوننت Title.js

حالا عنوان کتاب را می‌سازیم. فایل `Title.js` را بسازید و این کد را بنویسید:

```jsx
import React from "react";

const Title = () => {
  return <h2>عنوان کتاب</h2>;
};

export default Title;
```

**توضیح:** از تگ `<h2>` استفاده کردیم چون عنوان کتاب یک هدر سطح دوم است و معنایی برای مرورگرها دارد.

### ۲.۳: کامپوننت Author.js

نویسنده کتاب را هم جدا می‌کنیم. فایل `Author.js` را بسازید:

```jsx
import React from "react";

const Author = () => {
  return <div>نویسنده</div>;
};

export default Author;
```

**توضیح:** اینجا از `<div>` استفاده کردیم چون نویسنده نیاز به استایل‌دهی خاصی ندارد (فعلاً!).

### ۲.۴: کامپوننت Book.js

حالا این سه کامپوننت را ترکیب می‌کنیم تا یک کارت کتاب بسازیم. فایل `Book.js` را بسازید:

```jsx
import React from "react";
import Image from "./Image";
import Title from "./Title";
import Author from "./Author";

const Book = () => {
  return (
    <article>
      <Image />
      <Title />
      <Author />
    </article>
  );
};

export default Book;
```

**توضیح:** تگ `<article>` به مرورگرها می‌گوید این یک واحد محتوایی مستقل (مثل یک کتاب) است. کامپوننت‌ها را داخل آن رندر کردیم.

### ۲.۵: کامپوننت BookList.js

برای نمایش چند کتاب، یک لیست می‌سازیم. فایل `BookList.js` را بسازید:

```jsx
import React from "react";
import Book from "./Book";

const BookList = () => {
  return (
    <section>
      <Book />
      <Book />
      <Book />
      <Book />
      <Book />
      <Book />
    </section>
  );
};

export default BookList;
```

**توضیح:** تگ `<section>` برای گروه‌بندی معنایی لیست کتاب‌ها استفاده شد. فعلاً ۶ کتاب تکراری داریم (بعداً داده‌ها را پویا می‌کنیم).

### ۲.۶: به‌روزرسانی App.js

فایل `App.js` را باز کنید و این کد را بنویسید:

```jsx
import React from "react";
import BookList from "./Components/BookList";

function App() {
  return (
    <div>
      <BookList />
    </div>
  );
}

export default App;
```

**توضیح:** `BookList` را داخل یک `<div>` رندر کردیم که ریشه برنامه است.

### ۲.۷: بررسی index.js

فایل `index.js` معمولاً نیازی به تغییر ندارد، اما برای اطمینان، این کد را چک کنید:

```jsx
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<App />);
```

**توضیح:** این کد برنامه را به DOM متصل می‌کند.

## گام ۳: اجرای پروژه

حالا پروژه را تست می‌کنیم:

1. در ترمینال دستور زیر را بزنید:

   ```bash
   npm start
   ```
2. مرورگر را باز کنید و به `http://localhost:3000` بروید. باید ۶ کارت کتاب ببینید که هر کدام تصویر، عنوان "عنوان کتاب" و نویسنده "نویسنده" را نشان می‌دهند.

## گام ۴: توضیحات تکمیلی

- **چرا این ساختار؟** استفاده از کامپوننت‌ها کد را مدولار می‌کند. اگر بخواهید بعداً تغییری بدهید (مثلاً استایل یا داده)، فقط یک فایل را تغییر می‌دهید.
- **تگ‌های معنایی:** `<article>` و `<section>` به سئو و دسترسی‌پذیری کمک می‌کنند.
- **محدودیت فعلی:** داده‌ها ثابت هستند. در جلسه بعدی یاد می‌گیریم چطور با props آن‌ها را پویا کنیم.

## گام ۵: برنامه جلسه بعدی

- اضافه کردن داده‌های پویا با استفاده از آرایه و props.
- شروع استایل‌دهی با CSS برای شبیه‌سازی ظاهر bazarketab.ir (مثلاً با Flexbox و فونت‌های فارسی).

خب، امروز کارمون تموم شد! اگر سوالی دارید یا کدی کار نکرد، بهم بگید تا با هم حلش کنیم. تا جلسه بعدی موفق باشید!